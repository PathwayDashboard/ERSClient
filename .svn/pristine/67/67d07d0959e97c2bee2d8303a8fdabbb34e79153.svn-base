package ers.client.api;

import java.util.*;
import java.io.File;
import java.util.Map;

import ers.client.ApiClient;
import ers.client.ApiException;
import ers.client.Configuration;
import ers.client.Pair;
import ers.client.TypeRef;
import ers.client.model.*;

import java.util.HashMap;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-01-13T11:04:43.139+01:00")
public class PathwayhdmisessionApi {
  private ApiClient apiClient;

  public PathwayhdmisessionApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PathwayhdmisessionApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  
  /**
   * H_UC01, H_UC02 Creates session, logs a user in. The session ID will be returned as a JSON response to this call.
   * 
   * @param createPatientSessionData Username and password to open new session.
   * @return GenericPostputResult
   */
  public GenericPostputResult pathwayHdmiSessionPostPatientSession (CreatePatientSessionData createPatientSessionData) throws ApiException {
    Object postBody = createPatientSessionData;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'createPatientSessionData' is set
     if (createPatientSessionData == null) {
        throw new ApiException(400, "Missing the required parameter 'createPatientSessionData' when calling pathwayHdmiSessionPostPatientSession");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/patient/session".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
}
