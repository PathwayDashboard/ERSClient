package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.ApiClient;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.TypeRef;

import io.swagger.client.model.*;

import java.util.*;

import io.swagger.client.model.BehaviouralChangeProgrammeGeneralSection;
import io.swagger.client.model.GenericPostputResult;
import io.swagger.client.model.BehaviouralChangeProgrammeFull;
import io.swagger.client.model.GoodHabitSubsection;
import io.swagger.client.model.PersonalGoalSubsection;
import io.swagger.client.model.RecommendedGoalSubsection;

import java.io.File;
import java.util.Map;
import java.util.HashMap;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-07-22T14:54:54.065+02:00")
public class BehaviouralChangeProgrammeApi {
  private ApiClient apiClient;

  public BehaviouralChangeProgrammeApi() {
    this(Configuration.getDefaultApiClient());
  }

  public BehaviouralChangeProgrammeApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  
  /**
   * Gets a BehaviouralChangeProgramme from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return BehaviouralChangeProgrammeGeneralSection
   */
  public BehaviouralChangeProgrammeGeneralSection behaviouralChangeProgrammeGetBehaviouralChangeProgramme (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammeGetBehaviouralChangeProgramme");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgramme/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<BehaviouralChangeProgrammeGeneralSection>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgramme of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param behaviouralChangeProgramme Data belonging to an BehaviouralChangeProgramme
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgrammePutBehaviouralChangeProgramme (String patientNumber, BehaviouralChangeProgrammeGeneralSection behaviouralChangeProgramme, String xSessionId) throws ApiException {
    Object postBody = behaviouralChangeProgramme;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammePutBehaviouralChangeProgramme");
     }
     
     // verify the required parameter 'behaviouralChangeProgramme' is set
     if (behaviouralChangeProgramme == null) {
        throw new ApiException(400, "Missing the required parameter 'behaviouralChangeProgramme' when calling behaviouralChangeProgrammePutBehaviouralChangeProgramme");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgramme/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "PUT", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets a BehaviouralChangeProgrammeFull from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return BehaviouralChangeProgrammeFull
   */
  public BehaviouralChangeProgrammeFull behaviouralChangeProgrammeGetBehaviouralChangeProgrammeFull (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammeGetBehaviouralChangeProgrammeFull");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeFull/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<BehaviouralChangeProgrammeFull>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgrammeFull of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param behaviouralChangeProgramme Data belonging to an BehaviouralChangeProgrammeFull
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgrammePutBehaviouralChangeProgramme_1 (String patientNumber, BehaviouralChangeProgrammeFull behaviouralChangeProgramme, String xSessionId) throws ApiException {
    Object postBody = behaviouralChangeProgramme;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammePutBehaviouralChangeProgramme_1");
     }
     
     // verify the required parameter 'behaviouralChangeProgramme' is set
     if (behaviouralChangeProgramme == null) {
        throw new ApiException(400, "Missing the required parameter 'behaviouralChangeProgramme' when calling behaviouralChangeProgrammePutBehaviouralChangeProgramme_1");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeFull/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "PUT", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets BehaviouralChangeProgrammeGoodHabits from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<GoodHabitSubsection>
   */
  public List<GoodHabitSubsection> behaviouralChangeProgrammeGetBehaviouralChangeProgrammeGoodHabits (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammeGetBehaviouralChangeProgrammeGoodHabits");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeGoodHabits/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<GoodHabitSubsection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgrammeGoodHabit of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param goodHabit Data belonging to an GoodHabit
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgrammePostBehaviouralChangeProgrammeGoodHabit (String patientNumber, GoodHabitSubsection goodHabit, String xSessionId) throws ApiException {
    Object postBody = goodHabit;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammeGoodHabit");
     }
     
     // verify the required parameter 'goodHabit' is set
     if (goodHabit == null) {
        throw new ApiException(400, "Missing the required parameter 'goodHabit' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammeGoodHabit");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeGoodHabits/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets BehaviouralChangeProgrammePersonalGoals from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<PersonalGoalSubsection>
   */
  public List<PersonalGoalSubsection> behaviouralChangeProgrammeGetBehaviouralChangeProgrammePersonalGoals (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammeGetBehaviouralChangeProgrammePersonalGoals");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammePersonalGoals/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<PersonalGoalSubsection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgrammePersonalGoal of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param personalGoal Data belonging to an PersonalGoal
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgrammePostBehaviouralChangeProgrammePersonalGoals (String patientNumber, PersonalGoalSubsection personalGoal, String xSessionId) throws ApiException {
    Object postBody = personalGoal;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammePersonalGoals");
     }
     
     // verify the required parameter 'personalGoal' is set
     if (personalGoal == null) {
        throw new ApiException(400, "Missing the required parameter 'personalGoal' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammePersonalGoals");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammePersonalGoals/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets BehaviouralChangeProgrammeRecommendedGoals from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<RecommendedGoalSubsection>
   */
  public List<RecommendedGoalSubsection> behaviouralChangeProgrammeGetBehaviouralChangeProgrammeRecommendedGoals (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammeGetBehaviouralChangeProgrammeRecommendedGoals");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeRecommendedGoals/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<RecommendedGoalSubsection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgrammeRecommendedGoal of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param recommendedGoal Data belonging to an RecommendedGoal
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgrammePostBehaviouralChangeProgrammeRecommendedGoal (String patientNumber, RecommendedGoalSubsection recommendedGoal, String xSessionId) throws ApiException {
    Object postBody = recommendedGoal;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammeRecommendedGoal");
     }
     
     // verify the required parameter 'recommendedGoal' is set
     if (recommendedGoal == null) {
        throw new ApiException(400, "Missing the required parameter 'recommendedGoal' when calling behaviouralChangeProgrammePostBehaviouralChangeProgrammeRecommendedGoal");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgrammeRecommendedGoals/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
}
