package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.ApiClient;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.TypeRef;

import io.swagger.client.model.*;

import java.util.*;

import io.swagger.client.model.AnswerSubSubsection;
import io.swagger.client.model.GenericPostputResult;
import io.swagger.client.model.AssessmentSubSection;
import io.swagger.client.model.IdPostputResult;
import io.swagger.client.model.BehaviouralStageSubsection;

import java.io.File;
import java.util.Map;
import java.util.HashMap;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-07-19T12:24:36.310+02:00")
public class BehaviouralChangeProgressApi {
  private ApiClient apiClient;

  public BehaviouralChangeProgressApi() {
    this(Configuration.getDefaultApiClient());
  }

  public BehaviouralChangeProgressApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  
  /**
   * Gets BehaviouralChangeProgressAnswers from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param assessmentID The assesment ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<AnswerSubSubsection>
   */
  public List<AnswerSubSubsection> behaviouralChangeProgressGetBehaviouralChangeProgressAssessmentAnswers (String patientNumber, Integer assessmentID, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressGetBehaviouralChangeProgressAssessmentAnswers");
     }
     
     // verify the required parameter 'assessmentID' is set
     if (assessmentID == null) {
        throw new ApiException(400, "Missing the required parameter 'assessmentID' when calling behaviouralChangeProgressGetBehaviouralChangeProgressAssessmentAnswers");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressAnswers/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    
    queryParams.addAll(apiClient.parameterToPairs("", "assessmentID", assessmentID));
    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<AnswerSubSubsection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgressAnswer of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param assessmentID The assesment ID of the patient
   * @param answer Data belonging to an Answer
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgressPostBehaviouralChangeProgressAnswer (String patientNumber, Integer assessmentID, AnswerSubSubsection answer, String xSessionId) throws ApiException {
    Object postBody = answer;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressPostBehaviouralChangeProgressAnswer");
     }
     
     // verify the required parameter 'assessmentID' is set
     if (assessmentID == null) {
        throw new ApiException(400, "Missing the required parameter 'assessmentID' when calling behaviouralChangeProgressPostBehaviouralChangeProgressAnswer");
     }
     
     // verify the required parameter 'answer' is set
     if (answer == null) {
        throw new ApiException(400, "Missing the required parameter 'answer' when calling behaviouralChangeProgressPostBehaviouralChangeProgressAnswer");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressAnswers/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    
    queryParams.addAll(apiClient.parameterToPairs("", "assessmentID", assessmentID));
    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets BehaviouralChangeProgressAssessments from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<AssessmentSubSection>
   */
  public List<AssessmentSubSection> behaviouralChangeProgressGetBehaviouralChangeProgressAssessments (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressGetBehaviouralChangeProgressAssessments");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressAssessments/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<AssessmentSubSection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets BehaviouralChangeProgressAssessment of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param assessment Data belonging to an BehaviouralChangeProgressAssessment
   * @param xSessionId Identifies user which undertakes this action
   * @return IdPostputResult
   */
  public IdPostputResult behaviouralChangeProgressPostBehaviouralChangeProgressAssessment (String patientNumber, AssessmentSubSection assessment, String xSessionId) throws ApiException {
    Object postBody = assessment;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressPostBehaviouralChangeProgressAssessment");
     }
     
     // verify the required parameter 'assessment' is set
     if (assessment == null) {
        throw new ApiException(400, "Missing the required parameter 'assessment' when calling behaviouralChangeProgressPostBehaviouralChangeProgressAssessment");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressAssessments/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<IdPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Gets BehaviouralChangeProgressBehaviouralStages from a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param xSessionId Identifies user which undertakes this action
   * @return List<BehaviouralStageSubsection>
   */
  public List<BehaviouralStageSubsection> behaviouralChangeProgressGetBehaviouralChangeProgressBehaviouralStages (String patientNumber, String xSessionId) throws ApiException {
    Object postBody = null;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressGetBehaviouralChangeProgressBehaviouralStages");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressBehaviouralStages/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<List<BehaviouralStageSubsection>>() {};
    return apiClient.invokeAPI(path, "GET", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
  /**
   * Sets a BehaviouralChangeProgressBehaviouralStage of a patient
   * 
   * @param patientNumber The health ID of the patient
   * @param behaviouralStage Data belonging to an BehaviouralStage
   * @param xSessionId Identifies user which undertakes this action
   * @return GenericPostputResult
   */
  public GenericPostputResult behaviouralChangeProgressPostBehaviouralChangeProgressBehaviouralStage (String patientNumber, BehaviouralStageSubsection behaviouralStage, String xSessionId) throws ApiException {
    Object postBody = behaviouralStage;
    byte[] postBinaryBody = null;
    
     // verify the required parameter 'patientNumber' is set
     if (patientNumber == null) {
        throw new ApiException(400, "Missing the required parameter 'patientNumber' when calling behaviouralChangeProgressPostBehaviouralChangeProgressBehaviouralStage");
     }
     
     // verify the required parameter 'behaviouralStage' is set
     if (behaviouralStage == null) {
        throw new ApiException(400, "Missing the required parameter 'behaviouralStage' when calling behaviouralChangeProgressPostBehaviouralChangeProgressBehaviouralStage");
     }
     
    // create path and map variables
    String path = "/pathway/hdm/BehaviouralChangeProgressBehaviouralStages/{patientNumber}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "patientNumber" + "\\}", apiClient.escapeString(patientNumber.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    Map<String, String> headerParams = new HashMap<String, String>();
    Map<String, Object> formParams = new HashMap<String, Object>();

    

    if (xSessionId != null)
    headerParams.put("X-session_id", apiClient.parameterToString(xSessionId));
    

    

    final String[] accepts = {
      "application/json", "text/json", "application/xml", "text/xml"
    };
    final String accept = apiClient.selectHeaderAccept(accepts);

    final String[] contentTypes = {
      "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
    };
    final String contentType = apiClient.selectHeaderContentType(contentTypes);

    String[] authNames = new String[] {  };

    

    
    
    TypeRef returnType = new TypeRef<GenericPostputResult>() {};
    return apiClient.invokeAPI(path, "POST", queryParams, postBody, postBinaryBody, headerParams, formParams, accept, contentType, authNames, returnType);
    
    


  }
  
}
